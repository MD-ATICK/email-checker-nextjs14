datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

// user, credit , email verify object , valume , subscription, blog

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  username       String?       @unique
  email          String?       @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  role           Role          @default(USER)
  subscriptionId String?       @db.ObjectId
  verifyEmails   VerifyEmail[]
  credits        Credit[]
  blogs          Blog[]
  volumes        Volume[]

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orders       Order[]
  Subscription Subscription[]
}

enum CreditType {
  DEFAULT
  PURCHASE
  SUBSCRIPTION
}

enum VolumeType {
  PURCHASE
  SUBSCRIPTION
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  category    String
  description String
  tags        String[]
  htmlContent String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
}

enum BuyType {
  PURCHASE
  SUBSCRIPTION
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  paymentId String
  amount    Int
  plan      BuyType
  credit    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Credit {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique @db.ObjectId
  credit    Int        @default(0)
  paymentId String?
  type      CreditType @default(DEFAULT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Volume {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  type          VolumeType     @default(PURCHASE)
  credit        Int
  dailyCredit   Int?
  amount        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  User          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String         @db.ObjectId
  subscriptions Subscription[]
}

type MxRecord {
  exchange String
  priority Int
}

model VerifyEmail {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String // remain. it's checking email not user email.
  domain        String
  reason        String
  isExist       Boolean    @default(false)
  isDisposable  Boolean    @default(false)
  isValidSyntax Boolean    @default(false)
  isValidDomain Boolean    @default(false)
  riskLevel     String
  isDisable     Boolean?
  is2FA         Boolean?
  mxRecords     MxRecord[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  User          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String     @db.ObjectId
}

enum SubscriptionType {
  ACTIVE
  ISACTIVE
  REFUND
  CANCELLED
}

model Subscription {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  User               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String           @db.ObjectId
  volumeId           String           @db.ObjectId
  volume             Volume           @relation(fields: [volumeId], references: [id], onDelete: Cascade)
  paymentId          String
  status             SubscriptionType @default(ISACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

// * ----------------------------------------------------------------------------- 
// * ----------------------------------------------------------------------------- 

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
